# -*- coding: utf-8 -*-
"""위치기반 가시화 수정_강유정.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tlP4QCvPv8HfTpxsQLLGD5xjMbVhPJzd
"""

!pip install pandas openpyxl

import pandas as pd
from google.colab import drive

# 구글 드라이브 마운트
drive.mount('/content/drive')

# 파일 경로 지정
file_path = '/content/drive/MyDrive/OSEAN sample(241005).xlsx'

# CSV 파일 읽기
df = pd.read_excel(file_path)
df_survey = pd.read_excel(file_path, sheet_name= '조사결과예시')
df_cleanup = pd.read_excel(file_path, sheet_name= '청소결과예시')

df_survey.head(3)

df_cleanup.head(3)

print("Survey Data Columns:")
for col in df_survey.columns:
    print(col)

print("\nCleanup Data Columns:")
for col in df_cleanup.columns:
    print(col)

df.info()

"""# I 수거예측량 가시화

## 1.시간별 시각화
"""

!apt-get install -y fonts-nanum

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# 나눔고딕 폰트 사용 설정
plt.rc('font', family='NanumGothic')

# 폰트 파일 리스트 출력 (확인용)
fm.findSystemFonts(fontpaths=None, fontext='ttf')

# 폰트 캐시 갱신
fm._load_fontmanager(try_read_cache=False)

# 조사결과 데이터를 불러온 후, 날짜 포맷을 변환하여 일, 월, 년 정보를 추출
df['조사시기'] = pd.to_datetime(df['조사시기'])
df['일'] = df['조사시기'].dt.date
df['월'] = df['조사시기'].dt.to_period('M')
df['년'] = df['조사시기'].dt.year

# 데이터 타입 확인
print(df[['조사시기', '일', '월', '년']].dtypes)

import pandas as pd
import matplotlib.pyplot as plt

# 1. 수거 예측량 빈도 히스토그램 (Daily Collection Prediction Histogram)
df['예측량(L)'].plot(kind='hist', bins=15, color='skyblue', edgecolor='black')

plt.title('수거 예측량 빈도')
plt.xlabel('예측량(L)')
plt.ylabel('빈도')

# 그래프를 이미지 파일로 저장
plt.savefig('frequency_histogram.png')

plt.show()


# 날짜별 예측 수거량 합계 계산
daily_collection = df.groupby('일')['예측량(L)'].sum()

# 2. 일별 수거 예측량 막대 그래프 (Daily Collection Prediction Bar Chart)
plt.figure(figsize=(10, 6))
daily_collection.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('일별 수거 예측량')
plt.xlabel('날짜')
plt.ylabel('예측량(L)')
plt.xticks(rotation= 0)
plt.tight_layout()  # 그래프 레이아웃 자동 조정
# 그래프를 이미지 파일로 저장
plt.savefig('daily_collection_bar_chart.png')
plt.show()


# 3. 월별 수거 예측량 박스플롯 (Monthly Collection Prediction Boxplot)
plt.figure(figsize=(10, 6))
df.boxplot(column='예측량(L)', by='월')
plt.title('월별 수거 예측량 박스플롯')
plt.suptitle('')  # 박스플롯의 기본 제목 제거
plt.xlabel('월')
plt.ylabel('예측량(L)')
# 그래프를 이미지 파일로 저장
plt.savefig('monthly_collection_boxplot.png')
plt.show()

# 4. 년도별 수거예측량 박스플
plt.figure(figsize=(10, 6))
df.boxplot(column='예측량(L)', by='년')
plt.title('연별 수거 예측량 박스플롯')
plt.suptitle('')  # 기본 상단 제목 제거
plt.xlabel('연도')
plt.ylabel('예측량(L)')
plt.grid(True)
# 그래프를 이미지 파일로 저장
plt.savefig('yearly_collection_boxplot.png')
plt.show()

from google.colab import files

# 저장된 이미지 파일 다운로드
files.download('frequency_histogram.png')
files.download('daily_collection_bar_chart.png')
files.download('monthly_collection_boxplot.png')
files.download('yearly_collection_boxplot.png')

"""## 2.위치기반 시각화

### plotly
"""

import matplotlib.pyplot as plt
from IPython.display import display
import matplotlib.colors as colors

# '경도' 변수를 float 타입으로 변환 (변환 불가능한 값은 NaN으로 처리)
df['경도'] = pd.to_numeric(df['경도'], errors='coerce')

# NaN 값이 포함된 행 제거 (경도 변환 시 발생한 NaN)
df = df.dropna(subset=['위도', '경도'])

pip install plotly

import plotly.express as px
import pandas as pd

# Plotly Scattermapbox를 사용하여 위치 기반 시각화
def create_plotly_map(data):
    # 수거량에 따른 마커 색상 설정 (파란색 그라데이션)
    # .loc[]을 사용하여 명시적으로 데이터 할당
    data.loc[:, '색상'] = data['예측량(L)'] / data['예측량(L)'].max()  # 0~1 범위로 정규화

    # Scattermapbox를 사용한 지도 시각화
    fig = px.scatter_mapbox(
        data,
        lat="위도",
        lon="경도",
        color="색상",
        size="예측량(L)",  # 수거량에 따라 마커 크기 변화
        color_continuous_scale="Blues",  # 파란색 그라데이션
        size_max=15,  # 마커 최대 크기
        zoom=10,
        mapbox_style="open-street-map",  # 기본 지도 스타일
        hover_name="해안명",  # 마우스오버 시 해안명 표시
        hover_data={"예측량(L)": True, "위도": False, "경도": False}  # 수거 예측량만 표시
    )

    # 그래프 레이아웃 설정
    fig.update_layout(
        title="Marine Waste Collection Prediction",
        margin={"r":0,"t":0,"l":0,"b":0},
        coloraxis_colorbar=dict(title="Prediction Volume (L)")  # 색상바 추가
    )

    fig.show()

 # HTML 파일로 저장
    file_path = 'predic_waste_map.html'  # 저장할 파일 이름
    fig.write_html(file_path)  # HTML 파일로 저장

    # 파일 다운로드
    files.download(file_path)

# 함수 실행 예시
create_plotly_map(df)  # df는 데이터프레임 이름

import plotly.express as px
import plotly.graph_objects as go

# 지도 중심을 예측량이 있는 지역으로 설정
center_lat = df['위도'].mean()
center_lon = df['경도'].mean()

# Plotly Scattermapbox를 사용하여 위치 기반 시각화
def create_plotly_map(data):
    # 수거량에 따른 마커 색상 설정 (파란색 그라데이션)
    data.loc[:, '색상'] = data['예측량(L)'] / data['예측량(L)'].max()  # 0~1 범위로 정규화

    # 전체 데이터를 한 번에 시각화하는 방법
    fig = go.Figure()

    # 년도별 데이터
    for year in data['년'].unique():
        yearly_data = data[data['년'] == year]
        fig.add_trace(go.Scattermapbox(
            lat=yearly_data['위도'],
            lon=yearly_data['경도'],
            mode='markers',
            marker=dict(
                size=yearly_data['예측량(L)'] / yearly_data['예측량(L)'].max() * 100,  # 수거량에 따라 마커 크기 변화
                color=yearly_data['예측량(L)'],  # 수거량(L)을 기반으로 색상 설정
                colorscale=[[0, 'lightpink'], [1, 'purple']],
                cmin=yearly_data['예측량(L)'].min(),  # 최소값 기준
                cmax=yearly_data['예측량(L)'].max(),  # 최대값 기준
                sizemode='area',
                showscale=True,
                opacity=0.8  # 마커 투명도 조절 (0 ~ 1 사이)
            ),
            hovertemplate="<b>%{hovertext}</b><br>수거 예측량: %{marker.size} L<extra></extra>",
            hovertext=yearly_data['해안명'],
            name=f'Year {year}',
            visible=(year == data['년'].min())  # 첫 번째 year만 보이도록 설정
        ))

    # 월별 데이터
    for (year, month), group in data.groupby(['년', '월']):
        fig.add_trace(go.Scattermapbox(
            lat=group['위도'],
            lon=group['경도'],
            mode='markers',
            marker=dict(
                size=group['예측량(L)'] / group['예측량(L)'].max() * 100,  # 마커 크기 증가
                color=group['예측량(L)'],  # 수거량(L)을 기반으로 색상 설정
                colorscale=[[0, 'lightblue'], [1, 'blue']],  # 연한 파란색 -> 진한 파란색
                cmin=group['예측량(L)'].min(),  # 최소값 기준
                cmax=group['예측량(L)'].max(),  # 최대값 기준
                sizemode='area',
                showscale=True,
                opacity=0.8  # 마커 투명도 조절
            ),
            hovertemplate="<b>%{hovertext}</b><br>수거 예측량: %{marker.size} L<extra></extra>",
            hovertext=group['해안명'],
            name=f'{year}-{month}',
            visible=False  # 기본적으로 보이지 않음
        ))

    # 일별 데이터
    for (year, month, day), group in data.groupby(['년', '월', '일']):
        fig.add_trace(go.Scattermapbox(
            lat=group['위도'],
            lon=group['경도'],
            mode='markers',
            marker=dict(
                size=group['예측량(L)'] / group['예측량(L)'].max() * 100,  # 마커 크기 증가
                color=group['예측량(L)'],  # 수거량(L)을 기반으로 색상 설정
                colorscale=[[0, 'lightgreen'], [1, 'darkgreen']],  # 연한 녹색 -> 진한 녹색
                cmin=group['예측량(L)'].min(),  # 최소값 기준
                cmax=group['예측량(L)'].max(),  # 최대값 기준
                sizemode='area',
                showscale=False,
                opacity=0.8  # 마커 투명도 조절
            ),
            hovertemplate="<b>%{hovertext}</b><br>수거 예측량: %{marker.size} L<extra></extra>",
            hovertext=group['해안명'],
            name=f'{year}-{month}-{day}',
            visible=False  # 기본적으로 보이지 않음
        ))

    # 버튼 그룹 추가 (년, 월, 일 선택)
    fig.update_layout(
        updatemenus=[
            dict(
                type="buttons",
                direction="right",
                buttons=[
                    dict(label="Year",
                         method="update",
                         args=[{"visible": [True] + [False] * (len(data['월'].unique()) + len(data['일'].unique()))},  # Year 데이터만 보이도록 설정
                               {"title": "Marine Waste Collection Prediction - Year"}]),
                    dict(label="Month",
                         method="update",
                         args=[{"visible": [False] * len(data['년'].unique()) + [True] * len(data['월'].unique()) + [False] * len(data['일'].unique())},  # Month 데이터만 보이도록 설정
                               {"title": "Marine Waste Collection Prediction - Month"}]),
                    dict(label="Day",
                         method="update",
                         args=[{"visible": [False] * (len(data['년'].unique()) + len(data['월'].unique())) + [True] * len(data['일'].unique())},  # Day 데이터만 보이도록 설정
                               {"title": "Marine Waste Collection Prediction - Day"}])
                ],
                x=0.5,
                y=1.15,
                xanchor="center",
                yanchor="top"
            )
        ]
    )

    # 지도 및 레이아웃 설정 (지도 중심을 예측량이 있는 곳으로 설정)
    fig.update_layout(
        mapbox_style="open-street-map",  # 한글 지역명을 표시하기 위해 open-street-map 유지
        mapbox=dict(center={"lat": center_lat, "lon": center_lon}, zoom=10),
        margin={"r": 0, "t": 50, "l": 0, "b": 0},
        title="Marine Waste Collection Prediction",
        coloraxis_colorbar=dict(title="Prediction Volume (L)")
    )

    # 지도 출력
    fig.show()

    # HTML 파일로 저장
    file_path = 'predic_waste_button_map.html'  # 저장할 파일 이름
    fig.write_html(file_path)  # HTML 파일로 저장

    # 파일 다운로드
    files.download(file_path)

# 함수 실행 예시
create_plotly_map(df)  # df는 데이터프레임 이름

import plotly.express as px
import plotly.graph_objects as go

# 지도 중심을 예측량이 있는 지역으로 설정
center_lat = df['위도'].mean()
center_lon = df['경도'].mean()

# Plotly Scattermapbox를 사용하여 위치 기반 시각화
def create_plotly_map(data):
    # 수거량에 따른 마커 색상 설정 (파란색 그라데이션)
    data.loc[:, '색상'] = data['예측량(L)'] / data['예측량(L)'].max()  # 0~1 범위로 정규화

    # 전체 데이터를 한 번에 시각화하는 방법
    fig = go.Figure()

    # 년도별 데이터
    for year in data['년'].unique():
        yearly_data = data[data['년'] == year]
        fig.add_trace(go.Scattermapbox(
            lat=yearly_data['위도'],
            lon=yearly_data['경도'],
            mode='markers',
            marker=dict(
                size=yearly_data['예측량(L)'] / yearly_data['예측량(L)'].max() * 50,  # 수거량에 따라 마커 크기 변화
                color=yearly_data['색상'],
                colorscale='Blues',
                sizemode='area',
                showscale=bool(year == data['년'].min())
            ),
            hovertemplate="<b>%{hovertext}</b><br>수거 예측량: %{marker.size} L<extra></extra>",
            hovertext=yearly_data['해안명'],
            name=f'Year {year}',
            visible=(year == data['년'].min())  # 첫 번째 year만 보이도록 설정
        ))

    # 월별 데이터
    for (year, month), group in data.groupby(['년', '월']):
        fig.add_trace(go.Scattermapbox(
            lat=group['위도'],
            lon=group['경도'],
            mode='markers',
            marker=dict(
                size=group['예측량(L)'] / group['예측량(L)'].max() * 50,  # 수거량에 따라 마커 크기 변화
                color=group['색상'],
                colorscale='Blues',
                sizemode='area',
                showscale=False
            ),
            hovertemplate="<b>%{hovertext}</b><br>수거 예측량: %{marker.size} L<extra></extra>",
            hovertext=group['해안명'],
            name=f'{year}-{month}',
            visible=False  # 기본적으로 보이지 않음
        ))

    # 일별 데이터
    for (year, month, day), group in data.groupby(['년', '월', '일']):
        fig.add_trace(go.Scattermapbox(
            lat=group['위도'],
            lon=group['경도'],
            mode='markers',
            marker=dict(
                size=group['예측량(L)'] / group['예측량(L)'].max() * 50,  # 수거량에 따라 마커 크기 변화
                color=group['색상'],
                colorscale='Blues',
                sizemode='area',
                showscale=False
            ),
            hovertemplate="<b>%{hovertext}</b><br>수거 예측량: %{marker.size} L<extra></extra>",
            hovertext=group['해안명'],
            name=f'{year}-{month}-{day}',
            visible=False  # 기본적으로 보이지 않음
        ))

    # 버튼 그룹 추가 (년, 월, 일 선택)
    fig.update_layout(
        updatemenus=[
            dict(
                type="buttons",
                direction="right",
                buttons=[
                    dict(label="Year",
                         method="update",
                         args=[{"visible": [True] + [False] * (len(data['월'].unique()) + len(data['일'].unique()))},  # Year 데이터만 보이도록 설정
                               {"title": "Marine Waste Collection Prediction - Year"}]),
                    dict(label="Month",
                         method="update",
                         args=[{"visible": [False] * len(data['년'].unique()) + [True] * len(data['월'].unique()) + [False] * len(data['일'].unique())},  # Month 데이터만 보이도록 설정
                               {"title": "Marine Waste Collection Prediction - Month"}]),
                    dict(label="Day",
                         method="update",
                         args=[{"visible": [False] * (len(data['년'].unique()) + len(data['월'].unique())) + [True] * len(data['일'].unique())},  # Day 데이터만 보이도록 설정
                               {"title": "Marine Waste Collection Prediction - Day"}])
                ],
                x=0.5,
                y=1.15,
                xanchor="center",
                yanchor="top"
            )
        ]
    )

    # 지도 및 레이아웃 설정 (지도 중심을 예측량이 있는 곳으로 설정)
    fig.update_layout(
        mapbox_style="carto-darkmatter",
        mapbox=dict(center={"lat": center_lat, "lon": center_lon}, zoom=10),
        margin={"r": 0, "t": 50, "l": 0, "b": 0},
        title="Marine Waste Collection Prediction",
        coloraxis_colorbar=dict(title="Prediction Volume (L)")
    )

    # 지도 출력
    fig.show()

    # HTML 파일로 저장
    file_path = 'predic_waste_dark_map.html'  # 저장할 파일 이름
    fig.write_html(file_path)  # HTML 파일로 저장

    # 파일 다운로드
    files.download(file_path)

# 함수 실행 예시
create_plotly_map(df)  # df는 데이터프레임 이름

"""# II 쓰레기 분포 가시화"""

import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files

# 주요 쓰레기 종류 번호를 이름으로 매핑
waste_type_mapping = {
    1: '폐어구류',
    2: '부표류',
    3: '생활쓰레기류',
    4: '대형 투기쓰레기류',
    5: '초목류'
}

# '주요쓰레기종류' 열을 이름으로 변환
df_cleanup['주요쓰레기종류_이름'] = df_cleanup['주요쓰레기종류'].map(waste_type_mapping)

# 주요 쓰레기 종류별로 수거량 환산(L)을 그룹화하여 합계 계산
waste_type_distribution = df_cleanup.groupby('주요쓰레기종류_이름')['수거량 환산(L, 마대 개수 * 50L)'].sum().reset_index()

# 컬럼 이름 변경
waste_type_distribution.columns = ['주요 쓰레기 종류', '총 수거량 (L)']

# 쓰레기 종류별 색상 설정 (이름 기준으로 매핑)
color_dict = {
    '폐어구류': 'red',
    '부표류': 'blue',
    '생활쓰레기류': 'green',
    '대형 투기쓰레기류': 'purple',
    '초목류': 'orange'
}

# 바 그래프 그리기 (hue와 palette 설정)
plt.figure(figsize=(10, 6))
sns.barplot(
    data=waste_type_distribution,
    x='주요 쓰레기 종류',
    y='총 수거량 (L)',
    hue='주요 쓰레기 종류',  # x축과 동일한 변수 사용
    palette=color_dict,
    dodge=False,
    legend=False  # 범례 비활성화
)

# 그래프 제목과 축 레이블 설정
plt.title('쓰레기 종류별 총 수거량', fontsize=15)
plt.xlabel('쓰레기 종류', fontsize=12)
plt.ylabel('총 수거량 (L)', fontsize=12)

# 그래프 저장
plt.savefig('쓰레기_종류별_총_수거량.png')

# 결과 출력
print(waste_type_distribution)

# 그래프 출력
plt.show()

# 파일 다운로드
files.download('쓰레기_종류별_총_수거량.png')

# 경도와 위도를 숫자로 변환 (변환이 불가능한 값은 NaN 처리)
df_cleanup['위도'] = pd.to_numeric(df_cleanup['위도'], errors='coerce')
df_cleanup['경도'] = pd.to_numeric(df_cleanup['경도'], errors='coerce')

# 결측치 제거 (NaN 값이 있는 행을 제거)
df_cleanup = df_cleanup.dropna(subset=['위도', '경도'])

import folium

# 위도와 경도의 평균을 계산하여 지도 중심 설정
mean_lat = df_cleanup['위도'].mean()
mean_lon = df_cleanup['경도'].mean()

# 쓰레기 종류별로 색상을 설정하는 함수
def get_marker_color(waste_type):
    color_dict = {
        '폐어구류': 'red',
        '부표류': 'blue',
        '생활쓰레기류': 'green',
        '대형 투기쓰레기류': 'purple',
        '초목류': 'orange'
    }
    return color_dict.get(waste_type, 'gray')  # 기본 색상은 회색

# 지도 객체 생성
m = folium.Map(location=[mean_lat, mean_lon], zoom_start=12)

# 쓰레기 분포 별 위치에 종류에 따라 CircleMarker 추가
for idx, row in df_cleanup.iterrows():
    marker_color = get_marker_color(row['주요쓰레기종류_이름'])  # 쓰레기 종류 이름에 따른 색상 선택
    folium.CircleMarker(
        location=[row['위도'], row['경도']],
        radius=5,  # 고정된 원의 크기
        color=marker_color,
        fill=True,
        fill_color=marker_color,
        fill_opacity=0.7,
        stroke=False,  # 외곽선 제거
        popup=f"수거량: {row['수거량 환산(L, 마대 개수 * 50L)']}L, 종류: {row['주요쓰레기종류_이름']}"
    ).add_to(m)

# 지도 출력
m.save("waste_type_f_map.html")
m

from google.colab import files
files.download("waste_type_f_map.html")

"""날짜별 옵션 추가"""

# 청소결과 데이터를 불러온 후, 날짜 포맷을 변환하여 일, 월, 년 정보를 추출
df_cleanup['청소시기'] = pd.to_datetime(df_cleanup['청소시기'])
df_cleanup['일'] = df_cleanup['청소시기'].dt.date
df_cleanup['월'] = df_cleanup['청소시기'].dt.to_period('M')
df_cleanup['년'] = df_cleanup['청소시기'].dt.year

# '경도' 변수를 float 타입으로 변환 (변환 불가능한 값은 NaN으로 처리)
df_cleanup['경도'] = pd.to_numeric(df['경도'], errors='coerce')

# NaN 값이 포함된 행 제거 (경도 변환 시 발생한 NaN)
df_cleanup = df_cleanup.dropna(subset=['위도', '경도'])

df_cleanup.head(1)

df_cleanup.info()

# 데이터 타입 확인
print(df_cleanup[['청소시기', '일', '월', '년']].dtypes)

import plotly.express as px

# 주요 쓰레기 종류별 색상을 이름에 매핑
df_cleanup['color'] = df_cleanup['주요쓰레기종류_이름'].map(color_dict)

# Plotly 지도 시각화
fig = px.scatter_mapbox(
    df_cleanup,
    lat="위도",
    lon="경도",
    hover_name="주요쓰레기종류_이름",
    hover_data=["수거 마대 개수(개)", "수거량 환산(L, 마대 개수 * 50L)"],
    color="주요쓰레기종류_이름",
    color_discrete_map=color_dict,
    size_max=15,
    zoom=10,
    title="주요 쓰레기 종류별 분포"
)

# 지도 스타일과 초기 위치 설정
fig.update_layout(
    mapbox_style="open-street-map",
    mapbox_zoom=10,
    mapbox_center={"lat": df_cleanup['위도'].mean(), "lon": df_cleanup['경도'].mean()},
    height=600
)

# 지도 출력
fig.show()

# HTML 파일로 저장 (파일명을 문자열로 설정)
file_path = 'waste_type_map.html'  # 저장할 파일 이름
fig.write_html(file_path)  # HTML 파일로 저장

# 파일 다운로드
files.download(file_path)  # 파일 다운로드

import plotly.graph_objects as go
import pandas as pd

# 주요 쓰레기 종류별 색상을 이름에 매핑
df_cleanup['color'] = df_cleanup['주요쓰레기종류_이름'].map(color_dict)

# Plotly 지도 설정
fig = go.Figure()

# 일별 데이터를 추가하는 함수
def add_day_traces():
    for (year, month, day), group in df_cleanup.groupby(['년', '월', '일']):
        fig.add_trace(go.Scattermapbox(
            lat=group['위도'],
            lon=group['경도'],
            mode='markers',
            marker=go.scattermapbox.Marker(size=6, color=group['color']),
            name=f"{year}-{month}-{day}일",
            hovertext=[f"해안명: {coast} / 주요 쓰레기 종류: {waste_type}"
                       for coast, waste_type in zip(group['해안명'], group['주요쓰레기종류_이름'])],  # hover에 표시될 내용
            hoverinfo="text",  # hover 시 hovertext만 표시
            visible=False  # 기본적으로 비활성화
        ))

# 월별 데이터를 추가하는 함수
def add_month_traces():
    for (year, month), group in df_cleanup.groupby(['년', '월']):
        fig.add_trace(go.Scattermapbox(
            lat=group['위도'],
            lon=group['경도'],
            mode='markers',
            marker=go.scattermapbox.Marker(size=8, color=group['color']),
            name=f"{year}-{month}월",
            hovertext=[f"해안명: {coast} / 주요 쓰레기 종류: {waste_type}"
                       for coast, waste_type in zip(group['해안명'], group['주요쓰레기종류_이름'])],  # hover에 표시될 내용
            hoverinfo="text",  # hover 시 hovertext만 표시
            visible=False  # 기본적으로 비활성화
        ))

# 년별 데이터를 추가하는 함수
def add_year_traces():
    for year in df_cleanup['년'].unique():
        yearly_data = df_cleanup[df_cleanup['년'] == year]
        fig.add_trace(go.Scattermapbox(
            lat=yearly_data['위도'],
            lon=yearly_data['경도'],
            mode='markers',
            marker=go.scattermapbox.Marker(size=10, color=yearly_data['color']),
            name=f"{year}년",
            hovertext=[f"해안명: {coast} / 주요 쓰레기 종류: {waste_type}"
                       for coast, waste_type in zip(yearly_data['해안명'], yearly_data['주요쓰레기종류_이름'])],  # 해안명과 주요 쓰레기 종류를 표시
            hoverinfo="text",  # hover 시 hovertext만 표시
            visible=True  # 기본적으로 연도별 데이터는 활성화
        ))

# 데이터 추가
add_day_traces()
add_month_traces()
add_year_traces()

# 지도 스타일 설정 및 중심 설정
fig.update_layout(
    mapbox_style="open-street-map",
    mapbox_zoom=10,
    mapbox_center={"lat": df_cleanup['위도'].mean(), "lon": df_cleanup['경도'].mean()},
    height=600,
    title="날짜별 주요 쓰레기 종류 분포"
)

# 범례 고정
fig.update_layout(
    legend_title="주요 쓰레기 종류",
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)

# 버튼을 통한 일/월/년 데이터 필터링
updatemenus = [
    {
        "buttons": [
            {
                "label": "일별 보기",
                "method": "restyle",
                "args": [{"visible": [True if "일" in trace.name else False for trace in fig.data]}, {"title": "일별 쓰레기 종류 분포"}]
            },
            {
                "label": "월별 보기",
                "method": "restyle",
                "args": [{"visible": [True if "월" in trace.name else False for trace in fig.data]}, {"title": "월별 쓰레기 종류 분포"}]
            },
            {
                "label": "년별 보기",
                "method": "restyle",
                "args": [{"visible": [True if "년" in trace.name else False for trace in fig.data]}, {"title": "년별 쓰레기 종류 분포"}]
            }
        ],
        "direction": "down",
        "showactive": True
    }
]

# 버튼 메뉴를 레이아웃에 추가
fig.update_layout(updatemenus=updatemenus)

# 지도 출력
fig.show()

# HTML 파일로 저장 (파일명을 문자열로 설정)
file_path = 'waste_type_date_map.html'  # 저장할 파일 이름
fig.write_html(file_path)  # HTML 파일로 저장

# 파일 다운로드
files.download(file_path)  # 파일 다운로드